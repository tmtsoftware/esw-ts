import { pipe } from 'fp-ts/function'
import * as D from 'io-ts/lib/Decoder'
import type { Units } from '../models/params/Units'
import {
  angstrom,
  arcmin,
  arcsec,
  au,
  cal,
  centimeter,
  coulomb,
  count,
  day,
  degree,
  elvolt,
  encoder,
  erg,
  foot,
  gram,
  hertz,
  hour,
  inch,
  jansky,
  joule,
  kelvin,
  kilogram,
  kilometer,
  lightyear,
  liter,
  mag,
  marcsec,
  meter,
  microarcsec,
  micrometer,
  micron,
  mile,
  millimeter,
  millisecond,
  minute,
  newton,
  NoUnits,
  ounce,
  pascal,
  pix,
  pound,
  radian,
  sday,
  second,
  steradian,
  tai,
  utc,
  volt,
  watt,
  week,
  yard,
  year
} from '../models/params/Units'
import { ciLiteral, Decoder } from './Decoder'

const UnitsMap = {
  angstrom,
  arcmin,
  arcsec,
  day,
  degree,
  elvolt,
  gram,
  hour,
  hertz,
  joule,
  kelvin,
  kilogram,
  kilometer,
  liter,
  meter,
  marcsec,
  millimeter,
  millisecond,
  micron,
  micrometer,
  minute,
  newton,
  pascal,
  radian,
  second,
  sday,
  steradian,
  microarcsec,
  volt,
  watt,
  week,
  year,
  coulomb,
  centimeter,
  erg,
  au,
  jansky,
  lightyear,
  mag,
  cal,
  foot,
  inch,
  pound,
  mile,
  ounce,
  yard,
  NoUnits,
  encoder,
  count,
  pix,
  tai,
  utc
}

const unitsKeys = Object.keys(UnitsMap) as (keyof typeof UnitsMap)[]
export const UnitsKeyD = ciLiteral(unitsKeys[0], ...unitsKeys.slice(1))

export const UnitsD: Decoder<Units> = pipe(
  UnitsKeyD,
  D.parse((str) => {
    return D.success(UnitsMap[str])
  })
)
