pipeline {
    agent {
        label 'master'
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout latest version
                sh "git checkout $VERSION"
                sh "git pull origin $VERSION"
            }
        }

        stage('Install') {
            steps {
                //sh "./scripts/install_node.sh"
                sh "cs java --jvm temurin:1.21.0 --setup"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && java -version"
                //sh "./scripts/install_kotlin.sh"
                sh "kotlin -version"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && which sbt && sbt -Dsbt.log.noformat=true --version"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && which jps && jps -v"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && which java && java --version"
                sh "which cs && cs --version"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true clean"
            }
        }

        stage('Build library') {
            steps {
                sh 'bash -c ". $HOME/.nvm/nvm.sh;  which node && node --version"'
                sh 'bash -c ". $HOME/.nvm/nvm.sh;  which npm && npm --version"'
                sh 'bash -c ". $HOME/.nvm/nvm.sh;  npm ci"'
                sh 'bash -c ". $HOME/.nvm/nvm.sh;  npm run build"'
            }
        }

        stage('Tests') {
            steps {
                sh 'bash -c ". $HOME/.nvm/nvm.sh;  JEST_JUNIT_OUTPUT_FILE=junit.xml npm run test:ci"'
            }
        }

        stage('Build Example App') {
            steps {
                dir('example') {
                    sh 'bash -c ". $HOME/.nvm/nvm.sh;  npm ci"'
                    sh 'bash -c ". $HOME/.nvm/nvm.sh;  npm run build"'
                }
            }
        }

        stage('Selenium Test') {
            steps {
              sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true -Dprod.publish=true -DgenerateStoryReport=true -DRTM_PATH=./RTM -DOUTPUT_FILE=/testStoryMapping.txt clean test"
            }
        }
    }
    post {
        always {
            script {
                sendNotification(currentBuild.result)
            }

            junit skipPublishingChecks: true,  testResults: 'junit*.xml'

            // upload test coverage
            publishHTML(target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: false,
                keepAll              : true,
                reportDir            : './coverage/lcov-report',
                reportFiles          : 'index.html',
                reportName           : "Coverage Report"
            ])

            // Generate RTM
            sh "./rtm.sh"

            // Upload RTM
            publishHTML(target: [
              alwaysLinkToLastBuild: false,
              keepAll              : true,
              reportDir            : './RTM/',
              reportFiles          : 'index.html',
              reportName           : "Test-Story-Requirement mapping"
            ])
        }
    }
}

def sendNotification(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'

    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME}' [${VERSION}] [${env.BUILD_NUMBER}]"
    def summary = "${subject} (${env.BUILD_URL})"

    // override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }
    slackSend(channel: "#${SLACK_CH}", color: colorCode, message: summary)
}
